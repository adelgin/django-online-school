# Generated by Django 4.0 on 2025-04-05 19:28

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_student', models.BooleanField(default=False, verbose_name='Студент')),
                ('is_teacher', models.BooleanField(default=False, verbose_name='Преподаватель')),
                ('is_mentor', models.BooleanField(default=False, verbose_name='Ментор')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='Название курса')),
                ('description', models.TextField(verbose_name='Описание курса')),
                ('duration', models.PositiveSmallIntegerField(choices=[(6, '6 месяцев'), (12, '12 месяцев'), (18, '18 месяцев')], default=6, verbose_name='Продолжительность курса')),
                ('price', models.PositiveIntegerField(default=50000, verbose_name='Стоимость курса')),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Teacher',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='Имя и фамилия преподавателя')),
                ('email', models.EmailField(blank=True, max_length=100, null=True, verbose_name='E-mail преподавателя')),
                ('role', models.CharField(blank=True, choices=[('Семинарист', 'Семинарист'), ('Лектор', 'Лектор')], max_length=20, null=True, verbose_name='Роль преподавателя')),
                ('education', models.CharField(blank=True, max_length=100, null=True, verbose_name='Образование преподавателя (ВУЗ)')),
                ('company', models.CharField(blank=True, max_length=100, null=True, verbose_name='Компания')),
                ('experience', models.SmallIntegerField(blank=True, null=True, verbose_name='Опыт в годах')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='onlineschoolapp.user')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='Имя студента')),
                ('email', models.EmailField(blank=True, max_length=100, null=True, verbose_name='E-mail студента')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='onlineschoolapp.user')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Mentor',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=20, verbose_name='Имя ментора')),
                ('email', models.EmailField(blank=True, max_length=100, null=True, verbose_name='E-mail ментора')),
                ('education', models.CharField(blank=True, max_length=100, null=True, verbose_name='Образование ментора (ВУЗ)')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='onlineschoolapp.user')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=40, verbose_name='Тема занятия')),
                ('link', models.CharField(blank=True, max_length=100, null=True, verbose_name='Ссылка на занятие в Zoom')),
                ('course_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='onlineschoolapp.course', verbose_name='Курс')),
                ('teacher_id', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='onlineschoolapp.teacher', verbose_name='Преподаватель')),
            ],
            options={
                'ordering': ['course_id'],
            },
        ),
        migrations.CreateModel(
            name='Grade',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('homework1', models.SmallIntegerField(blank=True, choices=[(2, 2), (3, 3), (4, 4), (5, 5)], null=True, verbose_name='Оценка за 1 ДЗ')),
                ('homework2', models.SmallIntegerField(blank=True, choices=[(2, 2), (3, 3), (4, 4), (5, 5)], null=True, verbose_name='Оценка за 2 ДЗ')),
                ('project', models.SmallIntegerField(blank=True, choices=[(2, 2), (3, 3), (4, 4), (5, 5)], null=True, verbose_name='Оценка за проект')),
                ('final_mark', models.FloatField(blank=True, null=True, verbose_name='Оценка за курс')),
                ('course', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='onlineschoolapp.course', verbose_name='Курс')),
                ('student', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='onlineschoolapp.student', verbose_name='Студент')),
            ],
            options={
                'ordering': ['course'],
            },
        ),
        migrations.AddField(
            model_name='course',
            name='mentor',
            field=models.ManyToManyField(to='onlineschoolapp.Mentor'),
        ),
        migrations.AddField(
            model_name='course',
            name='student',
            field=models.ManyToManyField(through='onlineschoolapp.Grade', to='onlineschoolapp.Student'),
        ),
        migrations.AddField(
            model_name='course',
            name='teacher',
            field=models.ManyToManyField(to='onlineschoolapp.Teacher'),
        ),
    ]
